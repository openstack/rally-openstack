  - title: "Network Service Tests"
    description: "Neutron network, subnet and port management scenarios"
    workloads:
      - scenario:
          NeutronNetworks.create_and_delete_networks:
            network_create_args: {}
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          quotas:
            neutron:
              network: -1
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NeutronNetworks.create_and_delete_ports:
            network_create_args: {}
            port_create_args: {}
            ports_per_network: 1
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          quotas:
            neutron:
              network: -1
              port: -1
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NeutronNetworks.create_and_delete_routers:
            network_create_args: {}
            router_create_args: {}
            subnet_cidr_start: "1.1.0.0/30"
            subnet_create_args: {}
            subnets_per_network: 1
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          quotas:
            neutron:
              network: -1
              subnet: -1
              port: -1
              router: -1
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NeutronNetworks.create_and_delete_subnets:
            network_create_args: {}
            subnet_cidr_start: "1.1.0.0/30"
            subnet_create_args: {}
            subnets_per_network: 1
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          quotas:
            neutron:
              network: -1
              subnet: -1
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NeutronNetworks.create_and_list_networks:
            network_create_args: {}
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          quotas:
            neutron:
              network: -1
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NeutronNetworks.create_and_list_ports:
            network_create_args: {}
            port_create_args: {}
            ports_per_network: 1
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          quotas:
            neutron:
              network: -1
              port: -1
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NeutronNetworks.create_and_list_routers:
            network_create_args: {}
            router_create_args: {}
            subnet_cidr_start: "1.1.0.0/30"
            subnet_create_args: {}
            subnets_per_network: 1
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          quotas:
            neutron:
              network: -1
              subnet: -1
              router: -1
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NeutronNetworks.create_and_list_subnets:
            network_create_args: {}
            subnet_cidr_start: "1.1.0.0/30"
            subnet_create_args: {}
            subnets_per_network: 1
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          quotas:
            neutron:
              network: -1
              subnet: -1
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NeutronNetworks.create_and_update_networks:
            network_create_args: {}
            network_update_args:
              admin_state_up: false
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          quotas:
            neutron:
              network: -1
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NeutronNetworks.create_and_update_ports:
            network_create_args: {}
            port_create_args: {}
            port_update_args:
              admin_state_up: false
              device_id: "dummy_id"
              device_owner: "dummy_owner"
            ports_per_network: 1
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          quotas:
            neutron:
              network: -1
              port: -1
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NeutronNetworks.create_and_update_routers:
            network_create_args: {}
            router_create_args: {}
            router_update_args:
              admin_state_up: false
            subnet_cidr_start: "1.1.0.0/30"
            subnet_create_args: {}
            subnets_per_network: 1
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          quotas:
            neutron:
              network: -1
              subnet: -1
              port: -1
              router: -1
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NeutronNetworks.create_and_update_subnets:
            network_create_args: {}
            subnet_cidr_start: "1.4.0.0/16"
            subnet_create_args: {}
            subnet_update_args:
              enable_dhcp: false
            subnets_per_network: 1
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          quotas:
            neutron:
              network: -1
              subnet: -1
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          Quotas.neutron_update:
            max_quota: 1024
        contexts:
          {{ user_context(tenants_amount, users_amount, use_existing_users) }}
        runner:
          {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NeutronSubnets.delete_subnets: {}
        runner:
          constant:
            times: {{ users_amount }}
            concurrency: {{ users_amount }}
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users, True) %}
          quotas:
            neutron:
              network: -1
              subnet: -1
          network:
            subnets_per_network: {{ users_amount }}
            dualstack: True
            router: {}
          {% endcall %}
      - scenario:
          NeutronTrunks.create_and_list_trunks:
            network_create_args: {}
            subport_count: 10
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          quotas:
            neutron:
              network: -1
              port: -1
              trunk: -1
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NeutronTrunks.boot_server_with_subports:
            {{ vm_params(image_name, flavor_name) }}
            network_create_args: {}
            subport_count: 10
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          quotas:
            neutron:
              network: -1
              subnet: -1
              port: -1
              trunk: -1
            nova:
              instances: -1
              cores: -1
              ram: -1
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NeutronTrunks.boot_server_and_add_subports:
            {{ vm_params(image_name, flavor_name) }}
            network_create_args: {}
            subport_count: 10
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          quotas:
            neutron:
              network: -1
              subnet: -1
              port: -1
              trunk: -1
            nova:
              instances: -1
              cores: -1
              ram: -1
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NeutronTrunks.boot_server_and_batch_add_subports:
            {{ vm_params(image_name, flavor_name) }}
            network_create_args: {}
            subports_per_batch: 10
            batches: 5
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          quotas:
            neutron:
              network: -1
              subnet: -1
              port: -1
              trunk: -1
            nova:
              instances: -1
              cores: -1
              ram: -1
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=2*controllers_amount, times=8*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

