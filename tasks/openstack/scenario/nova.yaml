  - title: "Compute Service Tests"
    description: "Nova instance lifecycle and management scenarios"
    workloads:
      - scenario:
          NovaKeypair.boot_and_delete_server_with_keypair:
            {{ vm_params(image_name, flavor_name) }}
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          network:
            networks_per_tenant: 1
            start_cidr: "100.1.0.0/25"
          quotas:
            {{ unlimited_neutron() }}
            {{ unlimited_nova(keypairs=true) }}
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=min(50, 2*controllers_amount), times=17*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NovaKeypair.create_and_delete_keypair: {}
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          quotas:
            {{ unlimited_nova(keypairs=true) }}
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=min(50, 2*controllers_amount), times=67*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NovaKeypair.create_and_list_keypairs: {}
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          quotas:
            {{ unlimited_nova(keypairs=true) }}
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=min(50, 2*controllers_amount), times=67*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NovaServers.boot_and_bounce_server:
            actions:
              -
                hard_reboot: 1
              -
                soft_reboot: 1
              -
                stop_start: 1
              -
                rescue_unrescue: 1
            {{ vm_params(image_name, flavor_name) }}
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          network:
            networks_per_tenant: 1
            start_cidr: "100.1.0.0/25"
          quotas:
            {{ unlimited_neutron() }}
            {{ unlimited_nova() }}
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=min(50, 2*controllers_amount), times=17*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NovaServers.boot_and_delete_server:
            {{ vm_params(image_name, flavor_name) }}
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          network:
            networks_per_tenant: 1
            start_cidr: "100.1.0.0/25"
          quotas:
            {{ unlimited_neutron() }}
            {{ unlimited_nova() }}
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=min(50, 2*controllers_amount), times=17*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NovaServers.boot_and_list_server:
            detailed: true
            {{ vm_params(image_name, flavor_name) }}
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          network:
            networks_per_tenant: 1
            start_cidr: "100.1.0.0/25"
          quotas:
            {{ unlimited_neutron() }}
            {{ unlimited_nova() }}
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=min(50, 10*controllers_amount), times=333*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NovaServers.boot_and_rebuild_server:
            {{ vm_params(flavor=flavor_name) }}
            from_image:
              name: {{ image_name }}
            to_image:
              name: {{ image_name }}
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          network:
            networks_per_tenant: 1
            start_cidr: "100.1.0.0/25"
          quotas:
            {{ unlimited_neutron() }}
            {{ unlimited_nova() }}
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=min(50, 2*controllers_amount), times=17*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NovaServers.boot_server_from_volume_and_delete:
            {{ vm_params(image_name, flavor_name) }}
            volume_size: 5
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          network:
            networks_per_tenant: 1
            start_cidr: "100.1.0.0/25"
          quotas:
            {{ unlimited_volumes() }}
            {{ unlimited_neutron() }}
            {{ unlimited_nova() }}
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=min(50, 3*controllers_amount), times=17*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NovaServers.pause_and_unpause_server:
            {{ vm_params(image_name, flavor_name) }}
            force_delete: false
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          network:
            networks_per_tenant: 1
            start_cidr: "100.1.0.0/25"
          quotas:
            {{ unlimited_neutron() }}
            {{ unlimited_nova() }}
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=min(50, 2*controllers_amount), times=17*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          NovaServers.snapshot_server:
            {{ vm_params(image_name, flavor_name) }}
        contexts:
          {% call user_context(tenants_amount, users_amount, use_existing_users) %}
          network:
            networks_per_tenant: 1
            start_cidr: "100.1.0.0/25"
          quotas:
            {{ unlimited_neutron() }}
            {{ unlimited_nova() }}
          {% endcall %}
        runner:
          {{ constant_runner(concurrency=min(50, 2*controllers_amount), times=17*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}

      - scenario:
          Quotas.nova_update_and_delete:
            max_quota: 1024
        contexts:
          {{ user_context(tenants_amount, users_amount, use_existing_users) }}
        runner:
          {{ constant_runner(concurrency=min(50, 2*controllers_amount), times=17*controllers_amount, is_smoke=smoke) }}
        sla:
          {{ no_failures_sla() }}
